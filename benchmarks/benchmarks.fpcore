(FPCore
 (a b c d e f g h i)
 :name
 "matrixDeterminant"
 :pre
 (and (<= -10 a 10)
      (<= -10 b 10)
      (<= -10 c 10)
      (<= -10 d 10)
      (<= -10 e 10)
      (<= -10 f 10)
      (<= -10 g 10)
      (<= -10 h 10)
      (<= -10 i 10))
 (-
  (+ (+ (* (* a e) i) (* (* b f) g)) (* (* c d) h))
  (+ (+ (* (* c e) g) (* (* b d) i)) (* (* a f) h))))

(FPCore
 (a b c d e f g h i)
 :name
 "matrixDeterminant2"
 :pre
 (and (<= -10 a 10)
      (<= -10 b 10)
      (<= -10 c 10)
      (<= -10 d 10)
      (<= -10 e 10)
      (<= -10 f 10)
      (<= -10 g 10)
      (<= -10 h 10)
      (<= -10 i 10))
 (-
  (+ (* a (* e i)) (+ (* g (* b f)) (* c (* d h))))
  (+ (* e (* c g)) (+ (* i (* b d)) (* a (* f h))))))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "delta4"
 :description
 "Generated by FPTaylor"
 :precision
 binary64
 :pre
 (and (<= 4 x1 3969/625)
      (<= 4 x2 3969/625)
      (<= 4 x3 3969/625)
      (<= 4 x4 3969/625)
      (<= 4 x5 3969/625)
      (<= 4 x6 3969/625))
 (+
  (- (+ (+ (- (* (- x2) x3) (* x1 x4)) (* x2 x5)) (* x3 x6)) (* x5 x6))
  (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "delta"
 :description
 "Generated by FPTaylor"
 :precision
 binary64
 :pre
 (and (<= 4 x1 3969/625)
      (<= 4 x2 3969/625)
      (<= 4 x3 3969/625)
      (<= 4 x4 3969/625)
      (<= 4 x5 3969/625)
      (<= 4 x6 3969/625))
 (+
  (+
   (+
    (+
     (+
      (+
       (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))
       (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6)))
      (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6)))
     (* (* (- x2) x3) x4))
    (* (* (- x1) x3) x5))
   (* (* (- x1) x2) x6))
  (* (* (- x4) x5) x6)))

(FPCore
 (x0 x1 x2)
 :name
 "sum"
 :description
 "Generated by FPTaylor"
 :precision
 binary64
 :pre
 (and (<= 1 x0 2) (<= 1 x1 2) (<= 1 x2 2))
 (let ((p0 (- (+ x0 x1) x2)) (p1 (- (+ x1 x2) x0)) (p2 (- (+ x2 x0) x1)))
   (+ (+ p0 p1) p2)))

(FPCore
 (x1 x2)
 :name
 "himmilbeau"
 :description
 "Generated by FPTaylor"
 :precision
 binary64
 :pre
 (and (<= -5 x1 5) (<= -5 x2 5))
 (let ((a (- (+ (* x1 x1) x2) 11)) (b (- (+ x1 (* x2 x2)) 7)))
   (+ (* a a) (* b b))))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "floudas1"
 :precision
 binary64
 :pre
 (and (<= 0 x1 6)
      (<= 0 x2 6)
      (<= 1 x3 5)
      (<= 0 x4 6)
      (<= 0 x5 6)
      (<= 0 x6 10)
      (>= (- (+ (* (- x3 3) (- x3 3)) x4) 4) 0)
      (>= (- (+ (* (- x5 3) (- x5 3)) x6) 4) 0)
      (>= (+ (- 2 x1) (* 3 x2)) 0)
      (>= (- (+ 2 x1) x2) 0)
      (>= (- (- 6 x1) x2) 0)
      (>= (- (+ x1 x2) 2) 0))
 (-
  (-
   (-
    (-
     (- (* -25 (* (- x1 2) (- x1 2))) (* (- x2 2) (- x2 2)))
     (* (- x3 1) (- x3 1)))
    (* (- x4 4) (- x4 4)))
   (* (- x5 1) (- x5 1)))
  (* (- x6 4) (- x6 4))))

(FPCore
 (x1 x2)
 :name
 "floudas2"
 :precision
 binary64
 :pre
 (and (<= 0 x1 3)
      (<= 0 x2 4)
      (>=
       (-
        (+
         (- (* 2 (* (* x1 x1) (* x1 x1))) (* (* 8 (* x1 x1)) x1))
         (* (* 8 x1) x1))
        x2)
       0)
      (>=
       (-
        (+
         (-
          (+
           (- (* 4 (* (* x1 x1) (* x1 x1))) (* (* 32 (* x1 x1)) x1))
           (* (* 88 x1) x1))
          (* 96 x1))
         36)
        x2)
       0))
 (- (- x1) x2))

(FPCore
 (x1 x2)
 :name
 "floudas3"
 :precision
 binary64
 :pre
 (and (<= 0 x1 2) (<= 0 x2 3) (>= (+ (* -2 (* (* x1 x1) (* x1 x1))) 2) x2))
 (+ (- (* -12 x1) (* 7 x2)) (* x2 x2)))

(FPCore
 (x1 x2 x3)
 :name
 "hartman3"
 :precision
 binary64
 :pre
 (and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1))
 (let ((e1
        (+
         (+
          (* 3 (* (- x1 3689/10000) (- x1 3689/10000)))
          (* 10 (* (- x2 117/1000) (- x2 117/1000))))
         (* 30 (* (- x3 2673/10000) (- x3 2673/10000)))))
       (e2
        (+
         (+
          (* 1/10 (* (- x1 4699/10000) (- x1 4699/10000)))
          (* 10 (* (- x2 4387/10000) (- x2 4387/10000))))
         (* 35 (* (- x3 747/1000) (- x3 747/1000)))))
       (e3
        (+
         (+
          (* 3 (* (- x1 1091/10000) (- x1 1091/10000)))
          (* 10 (* (- x2 2183/2500) (- x2 2183/2500))))
         (* 30 (* (- x3 5547/10000) (- x3 5547/10000)))))
       (e4
        (+
         (+
          (* 1/10 (* (- x1 763/20000) (- x1 763/20000)))
          (* 10 (* (- x2 5743/10000) (- x2 5743/10000))))
         (* 35 (* (- x3 2207/2500) (- x3 2207/2500))))))
   (let ((exp1 (exp (- e1)))
         (exp2 (exp (- e2)))
         (exp3 (exp (- e3)))
         (exp4 (exp (- e4))))
     (- (+ (+ (+ (* 1 exp1) (* 6/5 exp2)) (* 3 exp3)) (* 16/5 exp4))))))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "hartman6"
 :precision
 binary64
 :pre
 (and (<= 0 x1 1) (<= 0 x2 1) (<= 0 x3 1) (<= 0 x4 1) (<= 0 x5 1) (<= 0 x6 1))
 (let ((e1
        (+
         (+
          (+
           (+
            (+
             (* 10 (* (- x1 82/625) (- x1 82/625)))
             (* 3 (* (- x2 106/625) (- x2 106/625))))
            (* 17 (* (- x3 5569/10000) (- x3 5569/10000))))
           (* 7/2 (* (- x4 31/2500) (- x4 31/2500))))
          (* 17/10 (* (- x5 8283/10000) (- x5 8283/10000))))
         (* 8 (* (- x6 2943/5000) (- x6 2943/5000)))))
       (e2
        (+
         (+
          (+
           (+
            (+
             (* 1/20 (* (- x1 2329/10000) (- x1 2329/10000)))
             (* 10 (* (- x2 827/2000) (- x2 827/2000))))
            (* 17 (* (- x3 8307/10000) (- x3 8307/10000))))
           (* 1/10 (* (- x4 467/1250) (- x4 467/1250))))
          (* 8 (* (- x5 251/2500) (- x5 251/2500))))
         (* 14 (* (- x6 9991/10000) (- x6 9991/10000)))))
       (e3
        (+
         (+
          (+
           (+
            (+
             (* 3 (* (- x1 587/2500) (- x1 587/2500)))
             (* 7/2 (* (- x2 1451/10000) (- x2 1451/10000))))
            (* 17/10 (* (- x3 1761/5000) (- x3 1761/5000))))
           (* 10 (* (- x4 2883/10000) (- x4 2883/10000))))
          (* 17 (* (- x5 3047/10000) (- x5 3047/10000))))
         (* 8 (* (- x6 133/200) (- x6 133/200)))))
       (e4
        (+
         (+
          (+
           (+
            (+
             (* 17 (* (- x1 4047/10000) (- x1 4047/10000)))
             (* 8 (* (- x2 2207/2500) (- x2 2207/2500))))
            (* 1/20 (* (- x3 2183/2500) (- x3 2183/2500))))
           (* 10 (* (- x4 5743/10000) (- x4 5743/10000))))
          (* 1/10 (* (- x5 1091/10000) (- x5 1091/10000))))
         (* 14 (* (- x6 381/10000) (- x6 381/10000))))))
   (let ((exp1 (exp (- e1)))
         (exp2 (exp (- e2)))
         (exp3 (exp (- e3)))
         (exp4 (exp (- e4))))
     (- (+ (+ (+ (* 1 exp1) (* 6/5 exp2)) (* 3 exp3)) (* 16/5 exp4))))))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "kepler0"
 :precision
 binary64
 :pre
 (and (<= 4 x1 159/25)
      (<= 4 x2 159/25)
      (<= 4 x3 159/25)
      (<= 4 x4 159/25)
      (<= 4 x5 159/25)
      (<= 4 x6 159/25))
 (+
  (- (- (+ (* x2 x5) (* x3 x6)) (* x2 x3)) (* x5 x6))
  (* x1 (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))))

(FPCore
 (x1 x2 x3 x4)
 :name
 "kepler1"
 :precision
 binary64
 :pre
 (and (<= 4 x1 159/25) (<= 4 x2 159/25) (<= 4 x3 159/25) (<= 4 x4 159/25))
 (-
  (-
   (-
    (-
     (+
      (+
       (* (* x1 x4) (- (+ (+ (- x1) x2) x3) x4))
       (* x2 (+ (+ (- x1 x2) x3) x4)))
      (* x3 (+ (- (+ x1 x2) x3) x4)))
     (* (* x2 x3) x4))
    (* x1 x3))
   (* x1 x2))
  x4))

(FPCore
 (x1 x2 x3 x4 x5 x6)
 :name
 "kepler2"
 :precision
 binary64
 :pre
 (and (<= 4 x1 159/25)
      (<= 4 x2 159/25)
      (<= 4 x3 159/25)
      (<= 4 x4 159/25)
      (<= 4 x5 159/25)
      (<= 4 x6 159/25))
 (-
  (-
   (-
    (-
     (+
      (+
       (* (* x1 x4) (+ (+ (- (+ (+ (- x1) x2) x3) x4) x5) x6))
       (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6)))
      (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6)))
     (* (* x2 x3) x4))
    (* (* x1 x3) x5))
   (* (* x1 x2) x6))
  (* (* x4 x5) x6)))

(FPCore
 (x0 x1 x2)
 :name
 "test01_sum3"
 :precision
 binary32
 :pre
 (and (< 1 x0 2) (< 1 x1 2) (< 1 x2 2))
 (let ((p0 (- (+ x0 x1) x2)) (p1 (- (+ x1 x2) x0)) (p2 (- (+ x2 x0) x1)))
   (+ (+ p0 p1) p2)))

(FPCore
 (x)
 :name
 "NMSE problem 3.3.7"
 :cite
 (hamming-1987 herbie-2015)
 :fpbench-domain
 textbook
 (+ (- (exp x) 2) (exp (- x))))

(FPCore
 (x)
 :name
 "NMSE example 3.7"
 :cite
 (hamming-1987 herbie-2015)
 :fpbench-domain
 textbook
 (- (exp x) 1))

(FPCore
 (a x)
 :name
 "NMSE section 3.5"
 :cite
 (hamming-1987 herbie-2015)
 :fpbench-domain
 textbook
 (- (exp (* a x)) 1))

(FPCore
 (x1 y1 x2 y2 x3 y3)
 :name
 "Shoelace formula"
 :description
 "Introduced in 'polygon-area'"
 :precision
 binary64
 (let ((s1 (- (* x1 y2) (* y1 x2)))
       (s2 (- (* x2 y3) (* y2 x3)))
       (s3 (- (* x3 y1) (* y3 x1))))
   (* 1/2 (+ (+ s1 s2) s3))))

(FPCore
 (x1 x2 x3)
 :name
 "rigidBody1"
 :cite
 (darulova-kuncak-2014 solovyev-et-al-2015)
 :fpbench-domain
 science
 :precision
 binary64
 :pre
 (and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))
 (- (- (- (- (* x1 x2)) (* (* 2 x2) x3)) x1) x3))

(FPCore
 (x1 x2 x3)
 :name
 "rigidBody2"
 :cite
 (darulova-kuncak-2014 solovyev-et-al-2015)
 :fpbench-domain
 science
 :precision
 binary64
 :pre
 (and (<= -15 x1 15) (<= -15 x2 15) (<= -15 x3 15))
 (-
  (+
   (- (+ (* (* (* 2 x1) x2) x3) (* (* 3 x3) x3)) (* (* (* x2 x1) x2) x3))
   (* (* 3 x3) x3))
  x2))

(FPCore
 (x)
 :name
 "sqroot"
 :cite
 (darulova-kuncak-2014 solovyev-et-al-2015)
 :fpbench-domain
 mathematics
 :pre
 (<= 0 x 1)
 (-
  (+ (- (+ 1 (* 1/2 x)) (* (* 1/8 x) x)) (* (* (* 1/16 x) x) x))
  (* (* (* (* 5/128 x) x) x) x)))

(FPCore
 (x)
 :name
 "sineOrder3"
 :cite
 (darulova-kuncak-2014 solovyev-et-al-2015)
 :fpbench-domain
 mathematics
 :precision
 binary64
 :pre
 (< -2 x 2)
 :rosa-post
 (=> res (< -1 res 1))
 :rosa-ensuring
 1/100000000000000
 (-
  (* 238732414637843/250000000000000 x)
  (* 6450306886639899/50000000000000000 (* (* x x) x))))