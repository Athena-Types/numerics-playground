(FPCore (ap an bp bn cp cn dp dn ep en fp fn gp gn hp hn ip in)
:name "matrixDeterminant"
:pre (and (<= 0 ap) (<= ap 0) (<= 0 bp) (<= bp 0) (<= 0 cp) (<= cp 0) (<= 0 dp) (<= dp 0) (<= 0 ep) (<= ep 0) (<= 0 fp) (<= fp 0) (<= 0 gp) (<= gp 0) (<= 0 hp) (<= hp 0) (<= 0 ip) (<= ip 0) (<= -10 an 10) (== ap 0) (<= -10 bn 10) (== bp 0) (<= -10 cn 10) (== cp 0) (<= -10 dn 10) (== dp 0) (<= -10 en 10) (== ep 0) (<= -10 fn 10) (== fp 0) (<= -10 gn 10) (== gp 0) (<= -10 hn 10) (== hp 0) (<= -10 in 10) (== ip 0))
(let ((pos (+ (+ (+ (+ (* (+ (* ap ep) (* an en)) ip) (* (+ (* ap en) (* ap en)) in)) (+ (* (+ (* bp fp) (* bn fn)) gp) (* (+ (* bp fn) (* bp fn)) gn))) (+ (* (+ (* cp dp) (* cn dn)) hp) (* (+ (* cp dn) (* cp dn)) hn))) (+ (+ (+ (* (+ (* cp ep) (* cn en)) gn) (* (+ (* cp ep) (* cn en)) gn)) (+ (* (+ (* bp dp) (* bn dn)) in) (* (+ (* bp dp) (* bn dn)) in))) (+ (* (+ (* ap fp) (* an fn)) hn) (* (+ (* ap fp) (* an fn)) hn))))) (neg (+ (+ (+ (+ (* (+ (* ap ep) (* an en)) in) (* (+ (* ap ep) (* an en)) in)) (+ (* (+ (* bp fp) (* bn fn)) gn) (* (+ (* bp fp) (* bn fn)) gn))) (+ (* (+ (* cp dp) (* cn dn)) hn) (* (+ (* cp dp) (* cn dn)) hn))) (+ (+ (+ (* (+ (* cp ep) (* cn en)) gp) (* (+ (* cp en) (* cp en)) gn)) (+ (* (+ (* bp dp) (* bn dn)) ip) (* (+ (* bp dn) (* bp dn)) in))) (+ (* (+ (* ap fp) (* an fn)) hp) (* (+ (* ap fn) (* ap fn)) hn)))))) (- pos neg)))
