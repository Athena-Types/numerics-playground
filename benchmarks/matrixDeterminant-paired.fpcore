(FPCore (ap an bp bn cp cn dp dn ep en fp fn gp gn hp hn ip in)
:name matrixDeterminant
:pre (and (<= 0 ap) (<= ap 0) (<= 0 bp) (<= bp 0) (<= 0 cp) (<= cp 0) (<= 0 dp) (<= dp 0) (<= 0 ep) (<= ep 0) (<= 0 fp) (<= fp 0) (<= 0 gp) (<= gp 0) (<= 0 hp) (<= hp 0) (<= 0 ip) (<= ip 0) (<= -10 (- ap an) 10) (<= -10 (- bp bn) 10) (<= -10 (- cp cn) 10) (<= -10 (- dp dn) 10) (<= -10 (- ep en) 10) (<= -10 (- fp fn) 10) (<= -10 (- gp gn) 10) (<= -10 (- hp hn) 10) (<= -10 (- ip in) 10))
(let ((pos (+ (+ (+ (+ (* (+ (* ap ep) (* an en)) ip) (* (+ (* ap en) (* ap en)) in)) (+ (* (+ (* bp fp) (* bn fn)) gp) (* (+ (* bp fn) (* bp fn)) gn))) (+ (* (+ (* cp dp) (* cn dn)) hp) (* (+ (* cp dn) (* cp dn)) hn))) (+ (+ (+ (* (+ (* cp ep) (* cn en)) gn) (* (+ (* cp ep) (* cn en)) gn)) (+ (* (+ (* bp dp) (* bn dn)) in) (* (+ (* bp dp) (* bn dn)) in))) (+ (* (+ (* ap fp) (* an fn)) hn) (* (+ (* ap fp) (* an fn)) hn))))) (neg (+ (+ (+ (+ (* (+ (* ap ep) (* an en)) in) (* (+ (* ap ep) (* an en)) in)) (+ (* (+ (* bp fp) (* bn fn)) gn) (* (+ (* bp fp) (* bn fn)) gn))) (+ (* (+ (* cp dp) (* cn dn)) hn) (* (+ (* cp dp) (* cn dn)) hn))) (+ (+ (+ (* (+ (* cp ep) (* cn en)) gp) (* (+ (* cp en) (* cp en)) gn)) (+ (* (+ (* bp dp) (* bn dn)) ip) (* (+ (* bp dn) (* bp dn)) in))) (+ (* (+ (* ap fp) (* an fn)) hp) (* (+ (* ap fn) (* ap fn)) hn)))))) (- pos neg)))
