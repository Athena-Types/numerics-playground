
// (* (* x2 x5) (+ (- (+ (+ (- x1 x2) x3) x4) x5) x6))
function delta_2
   (x1 : num) (x2' : ![2.0]num) (x3 : num) (x4 : num) (x5' : ![2.0]num) (x6 : num)
{
  let [x2] = x2';
  let [x5] = x5';

  s1 = subfp64(|x1, x2|);
  let a1 = s1;
  s2 = addfp64(|a1, x3|);
  let a2 = s2;
  s3 = subfp64(|a2, x4|);
  let a3 = s3;
  s4 = subfp64(|a3, x5|);
  let a4 = s4;
  s5 = addfp64(|a4, x6|);
  let a5 = s5;
  
  // x2 * x5
  x2_mul_x5 = mulfp64(x2,x5);
  let ax2_mul_x5 = x2_mul_x5;

  s6 = mulfp64(ax2_mul_x5, a5);
  s6
}

// (* (* x3 x6) (- (+ (+ (- (+ x1 x2) x3) x4) x5) x6))
function delta_3
   (x1 : num) (x2 : num) (x3' : ![2.0]num) (x4 : num) (x5 : num) (x6' : ![2.0]num)
{
  let [x3] = x3';
  let [x6] = x6';

  s1 = addfp64(|x1, x2|);
  let a1 = s1;
  s2 = subfp64(|a1, x3|);
  let a2 = s2;
  s3 = addfp64(|a2, x4|);
  let a3 = s3;
  s4 = addfp64(|a3, x5|);
  let a4 = s4;
  s5 = subfp64(|a4, x6|);
  let a5 = s5;
  
  // x3 * x6
  x3_mul_x6 = mulfp64(x3,x6);
  let ax3_mul_x6 = x3_mul_x6;

  s6 = mulfp64(ax3_mul_x6, a5);
  s6
}

// [blank] + (* (* (- arg1) arg2) arg3))
function delta_4_hof
   (expr : num) (arg1 : num) (arg2 : num) (arg3 : num)
{
  s1 = sub(|0.0,arg1|);
  a1 = s1;
  s2 = mulfp64(a1, arg2);
  let a2 = s2;
  s3 = mulfp64(a2, arg3);
  let a3 = s3;
  s4 = addfp64(|expr, a3|);
  s4
}

