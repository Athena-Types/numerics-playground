(FPCore (ap am bp bm cp cm dp dm ep em fp fm gp gm hp hm ip im)
:name "matrixDeterminant"
:pre (and (<= -10 ap 0) (<= 0 am 10) (<= -10 bp 0) (<= 0 bm 10) (<= -10 cp 0) (<= 0 cm 10) (<= -10 dp 0) (<= 0 dm 10) (<= -10 ep 0) (<= 0 em 10) (<= -10 fp 0) (<= 0 fm 10) (<= -10 gp 0) (<= 0 gm 10) (<= -10 hp 0) (<= 0 hm 10) (<= -10 ip 0) (<= 0 im 10))
(let ((pos (+ (+ (+ (+ (* (+ (* ap ep) (* am em)) ip) (* (+ (* ap em) (* ap em)) im)) (+ (* (+ (* bp fp) (* bm fm)) gp) (* (+ (* bp fm) (* bp fm)) gm))) (+ (* (+ (* cp dp) (* cm dm)) hp) (* (+ (* cp dm) (* cp dm)) hm))) (+ (+ (+ (* (+ (* cp ep) (* cm em)) gm) (* (+ (* cp ep) (* cm em)) gm)) (+ (* (+ (* bp dp) (* bm dm)) im) (* (+ (* bp dp) (* bm dm)) im))) (+ (* (+ (* ap fp) (* am fm)) hm) (* (+ (* ap fp) (* am fm)) hm))))) (neg (+ (+ (+ (+ (* (+ (* ap ep) (* am em)) im) (* (+ (* ap ep) (* am em)) im)) (+ (* (+ (* bp fp) (* bm fm)) gm) (* (+ (* bp fp) (* bm fm)) gm))) (+ (* (+ (* cp dp) (* cm dm)) hm) (* (+ (* cp dp) (* cm dm)) hm))) (+ (+ (+ (* (+ (* cp ep) (* cm em)) gp) (* (+ (* cp em) (* cp em)) gm)) (+ (* (+ (* bp dp) (* bm dm)) ip) (* (+ (* bp dm) (* bp dm)) im))) (+ (* (+ (* ap fp) (* am fm)) hp) (* (+ (* ap fm) (* ap fm)) hm)))))) (- pos neg)))
