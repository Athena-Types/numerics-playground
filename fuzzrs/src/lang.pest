program = { SOI ~ declaration+ ~ EOI }
declaration = { include | function | name }

keywords = { "let" | "lcb" | "lb" | "case"| "in" | "of" | "=" }

function = { "function" ~ name ~ args ~ body }
name = @{ 
  !keywords ~
  ASCII_ALPHA ~ ("_" | "-" | "'" | ASCII_ALPHANUMERIC)* 
  }

args = { arg* }
arg = { "(" ~ name ~ ":" ~ type ~ ")" }
type = { 
  monad | bang | forall | fun |
  unit | bang | num | tensor | cartesian | sum
}
unit = { "()" }
num = { "num" | "num[" ~ iop ~ "]" }
tensor = { "(" ~ type ~ "," ~ type ~ ")" }
cartesian = { "<" ~ type ~ "," ~ type ~ ">" }
sum = { atom_ty ~ "+" ~ type }
fun = { atom_ty ~ "+" ~ type }
monad = { "M[" ~ (eps | float) ~ "]" ~ type }
bang = { ("![" ~ float ~ "]"~ type) }
forall = { "forall" ~ name ~ "." ~ type }

atom_ty = { unit | num | "(" ~ type ~ ")" }

iop = { name ~ "(" ~ float ~ "," ~ float ~ ")" | lifted_op ~ iop ~ iop }
lifted_op = { "+" | "*" | "-" }

body = { "{" ~ expr ~ "}" }
expr = { 
  let | lcb | lb | lp |
  float | abs | app | op | proj | 
  tens | cart | in | 
  case | ret | rnd | factor | scale |
  var | atom
}
var = { name }
let = { 
  ("let" ~ name ~ "=" ~ expr ~ "in" ~ expr) 
  | (name ~ "=" ~ expr ~ ";" ~ expr) // old syntax
}
lcb = { 
  ("lcb" ~ name ~ "=" ~ expr ~ "in" ~ expr) 
  | ("let" ~ "[" ~ name ~ "]" ~ "=" ~ expr ~ ";" ~ expr) // old syntax
}
lb = { 
  ("lb" ~ name ~ "=" ~ expr ~ "in" ~ expr) 
  | ("let" ~ name ~ "=" ~ expr ~ ";" ~ expr) // old syntax
}
lp = { 
  ("lp" ~ name ~ "=" ~ expr ~ "in" ~ expr) 
  | ("let" ~ "(" ~ name ~ "," ~ name ~ ")" ~ "=" ~ expr ~ ";" ~ expr) // old syntax
}
op = { "add" ~ expr | "sub" ~ expr | "mul" ~ expr}
abs = { "fun" ~ args ~ body }
app = { 
  atom ~ expr 
}
atom = { var | float | "(" ~ expr ~ ")" }
proj = { "fst" ~ expr | "snd" ~ expr }
tens = { "(" ~ expr ~ "," ~ expr ~ ")" }
cart = { 
  ("|" ~ expr ~ "," ~ expr ~ "|") | 
  ("<" ~ expr ~ "," ~ expr ~ ">") // old syntax
}
in = { "inl" ~ expr | "inr" ~ expr }
case = { 
  "case" ~ expr ~ 
    "{" ~ 
      "inl" ~ expr ~ "=>" ~ expr 
      ~ "|" ~ 
      "inr" ~ expr ~ "=>" ~ expr ~ 
    "}"
  }
ret = { "ret" ~ expr }
rnd = { "ret" ~ expr }
factor = { "ret" ~ expr }
scale = { "[" ~ expr ~ "{" ~ float ~ "}" ~ "]" }


include = { "#include" ~ "\"" ~ filename ~ "\"" ~ (";")? }
filename = { path ~ ".fz" }
path = @{ ("." | name )  ~ ("/" ~ name)* }

// Numbers, taken from the pest docs
integer = { ("+" | "-")? ~ int }
eps = @{ "eps" ~ ( "16" | "32" | "64") ~ "_" ~ ("up" | "down") }
float   = { ("+" | "-")? ~ int ~ ("." ~ digits ~ exp? | exp)? }
int     = { "0" | (ASCII_NONZERO_DIGIT ~ digits?) }
digits  = { (ASCII_DIGIT | ("_" ~ ASCII_DIGIT))+ }
exp     = { ("E" | "e") ~ ("+" | "-")? ~ int }

space = _{ " " | NEWLINE | WHITE_SPACE }
WHITESPACE = _{ " " | NEWLINE | WHITE_SPACE }
COMMENT = ${ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
