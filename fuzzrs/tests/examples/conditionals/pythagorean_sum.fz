#include "../float_ops/addfp64.fz"
#include "../float_ops/sqrtfp64.fz"
#include "../float_ops/divfp64.fz"
#include "../float_ops/pow2_64.fz"
#include "min.fz"
#include "max.fz"
#include "band.fz"

/* The Pythagorean sum to reduce overflow and underflow.
  Ref: "Numerical Methods in Scientific Computing, VOLUME 1".
        Dahlquist and Bjorck. Siam. 2008. page 119.
*/

function pythagorean_sum (a : ![inf]num) (b : ![inf]num) {
    let [a'] = a;
    let [b'] = b;
    b1 = eq ([a'{inf}],[0.0{inf}]); 
    b2 = eq ([b'{inf}],[0.0{inf}]); 
    b3 = band [b1{2.0}] [b2{2.0}];
    if b3 then { 
        ret 0.0
    } 
    else { 
        p = max [a'{inf}] [b'{inf}];
        q = min [a'{inf}] [b'{inf}];
        rho' = divfp64 (q,p);
        let rho = rho';
        s  = pow2_64 [rho{2.0}];
        let s0  = s; 
        s1 = addfp64 (|1.0,s0|);
        let s2 = s1; 
        s3 = sqrtfp64 [s2{0.5}];
        let s4 = s3;             
        mulfp64 (p,s4)
    }
}

pythagorean_sum
